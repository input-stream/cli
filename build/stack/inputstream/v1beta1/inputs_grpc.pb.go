// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InputsClient is the client API for Inputs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputsClient interface {
	CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*Input, error)
	WatchInput(ctx context.Context, in *WatchInputRequest, opts ...grpc.CallOption) (Inputs_WatchInputClient, error)
	UpdateInput(ctx context.Context, in *UpdateInputRequest, opts ...grpc.CallOption) (*UpdateInputResponse, error)
	RemoveInput(ctx context.Context, in *RemoveInputRequest, opts ...grpc.CallOption) (*RemoveInputResponse, error)
	GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*Input, error)
	ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*ListInputsResponse, error)
}

type inputsClient struct {
	cc grpc.ClientConnInterface
}

func NewInputsClient(cc grpc.ClientConnInterface) InputsClient {
	return &inputsClient{cc}
}

func (c *inputsClient) CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*Input, error) {
	out := new(Input)
	err := c.cc.Invoke(ctx, "/build.stack.inputstream.v1beta1.Inputs/CreateInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputsClient) WatchInput(ctx context.Context, in *WatchInputRequest, opts ...grpc.CallOption) (Inputs_WatchInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Inputs_ServiceDesc.Streams[0], "/build.stack.inputstream.v1beta1.Inputs/WatchInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &inputsWatchInputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Inputs_WatchInputClient interface {
	Recv() (*Input, error)
	grpc.ClientStream
}

type inputsWatchInputClient struct {
	grpc.ClientStream
}

func (x *inputsWatchInputClient) Recv() (*Input, error) {
	m := new(Input)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inputsClient) UpdateInput(ctx context.Context, in *UpdateInputRequest, opts ...grpc.CallOption) (*UpdateInputResponse, error) {
	out := new(UpdateInputResponse)
	err := c.cc.Invoke(ctx, "/build.stack.inputstream.v1beta1.Inputs/UpdateInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputsClient) RemoveInput(ctx context.Context, in *RemoveInputRequest, opts ...grpc.CallOption) (*RemoveInputResponse, error) {
	out := new(RemoveInputResponse)
	err := c.cc.Invoke(ctx, "/build.stack.inputstream.v1beta1.Inputs/RemoveInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputsClient) GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*Input, error) {
	out := new(Input)
	err := c.cc.Invoke(ctx, "/build.stack.inputstream.v1beta1.Inputs/GetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputsClient) ListInputs(ctx context.Context, in *ListInputsRequest, opts ...grpc.CallOption) (*ListInputsResponse, error) {
	out := new(ListInputsResponse)
	err := c.cc.Invoke(ctx, "/build.stack.inputstream.v1beta1.Inputs/ListInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InputsServer is the server API for Inputs service.
// All implementations must embed UnimplementedInputsServer
// for forward compatibility
type InputsServer interface {
	CreateInput(context.Context, *CreateInputRequest) (*Input, error)
	WatchInput(*WatchInputRequest, Inputs_WatchInputServer) error
	UpdateInput(context.Context, *UpdateInputRequest) (*UpdateInputResponse, error)
	RemoveInput(context.Context, *RemoveInputRequest) (*RemoveInputResponse, error)
	GetInput(context.Context, *GetInputRequest) (*Input, error)
	ListInputs(context.Context, *ListInputsRequest) (*ListInputsResponse, error)
	mustEmbedUnimplementedInputsServer()
}

// UnimplementedInputsServer must be embedded to have forward compatible implementations.
type UnimplementedInputsServer struct {
}

func (UnimplementedInputsServer) CreateInput(context.Context, *CreateInputRequest) (*Input, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInput not implemented")
}
func (UnimplementedInputsServer) WatchInput(*WatchInputRequest, Inputs_WatchInputServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchInput not implemented")
}
func (UnimplementedInputsServer) UpdateInput(context.Context, *UpdateInputRequest) (*UpdateInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInput not implemented")
}
func (UnimplementedInputsServer) RemoveInput(context.Context, *RemoveInputRequest) (*RemoveInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInput not implemented")
}
func (UnimplementedInputsServer) GetInput(context.Context, *GetInputRequest) (*Input, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (UnimplementedInputsServer) ListInputs(context.Context, *ListInputsRequest) (*ListInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInputs not implemented")
}
func (UnimplementedInputsServer) mustEmbedUnimplementedInputsServer() {}

// UnsafeInputsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InputsServer will
// result in compilation errors.
type UnsafeInputsServer interface {
	mustEmbedUnimplementedInputsServer()
}

func RegisterInputsServer(s grpc.ServiceRegistrar, srv InputsServer) {
	s.RegisterService(&Inputs_ServiceDesc, srv)
}

func _Inputs_CreateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputsServer).CreateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.inputstream.v1beta1.Inputs/CreateInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputsServer).CreateInput(ctx, req.(*CreateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inputs_WatchInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchInputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InputsServer).WatchInput(m, &inputsWatchInputServer{stream})
}

type Inputs_WatchInputServer interface {
	Send(*Input) error
	grpc.ServerStream
}

type inputsWatchInputServer struct {
	grpc.ServerStream
}

func (x *inputsWatchInputServer) Send(m *Input) error {
	return x.ServerStream.SendMsg(m)
}

func _Inputs_UpdateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputsServer).UpdateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.inputstream.v1beta1.Inputs/UpdateInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputsServer).UpdateInput(ctx, req.(*UpdateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inputs_RemoveInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputsServer).RemoveInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.inputstream.v1beta1.Inputs/RemoveInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputsServer).RemoveInput(ctx, req.(*RemoveInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inputs_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputsServer).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.inputstream.v1beta1.Inputs/GetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputsServer).GetInput(ctx, req.(*GetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inputs_ListInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputsServer).ListInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.stack.inputstream.v1beta1.Inputs/ListInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputsServer).ListInputs(ctx, req.(*ListInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inputs_ServiceDesc is the grpc.ServiceDesc for Inputs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inputs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.stack.inputstream.v1beta1.Inputs",
	HandlerType: (*InputsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInput",
			Handler:    _Inputs_CreateInput_Handler,
		},
		{
			MethodName: "UpdateInput",
			Handler:    _Inputs_UpdateInput_Handler,
		},
		{
			MethodName: "RemoveInput",
			Handler:    _Inputs_RemoveInput_Handler,
		},
		{
			MethodName: "GetInput",
			Handler:    _Inputs_GetInput_Handler,
		},
		{
			MethodName: "ListInputs",
			Handler:    _Inputs_ListInputs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchInput",
			Handler:       _Inputs_WatchInput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "build/stack/inputstream/v1beta1/inputs.proto",
}
