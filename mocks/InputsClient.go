// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1beta1 "github.com/input-stream/cli/build/stack/inputstream/v1beta1"
)

// InputsClient is an autogenerated mock type for the InputsClient type
type InputsClient struct {
	mock.Mock
}

// CreateInput provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) CreateInput(ctx context.Context, in *v1beta1.CreateInputRequest, opts ...grpc.CallOption) (*v1beta1.Input, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.Input
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.CreateInputRequest, ...grpc.CallOption) *v1beta1.Input); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.Input)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.CreateInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInput provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) GetInput(ctx context.Context, in *v1beta1.GetInputRequest, opts ...grpc.CallOption) (*v1beta1.Input, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.Input
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.GetInputRequest, ...grpc.CallOption) *v1beta1.Input); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.Input)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.GetInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInputs provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) ListInputs(ctx context.Context, in *v1beta1.ListInputsRequest, opts ...grpc.CallOption) (*v1beta1.ListInputsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.ListInputsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.ListInputsRequest, ...grpc.CallOption) *v1beta1.ListInputsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.ListInputsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.ListInputsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInput provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) RemoveInput(ctx context.Context, in *v1beta1.RemoveInputRequest, opts ...grpc.CallOption) (*v1beta1.RemoveInputResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.RemoveInputResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.RemoveInputRequest, ...grpc.CallOption) *v1beta1.RemoveInputResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.RemoveInputResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.RemoveInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInput provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) UpdateInput(ctx context.Context, in *v1beta1.UpdateInputRequest, opts ...grpc.CallOption) (*v1beta1.UpdateInputResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1beta1.UpdateInputResponse
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.UpdateInputRequest, ...grpc.CallOption) *v1beta1.UpdateInputResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta1.UpdateInputResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.UpdateInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchInput provides a mock function with given fields: ctx, in, opts
func (_m *InputsClient) WatchInput(ctx context.Context, in *v1beta1.WatchInputRequest, opts ...grpc.CallOption) (v1beta1.Inputs_WatchInputClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 v1beta1.Inputs_WatchInputClient
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.WatchInputRequest, ...grpc.CallOption) v1beta1.Inputs_WatchInputClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.Inputs_WatchInputClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.WatchInputRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInputsClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewInputsClient creates a new instance of InputsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInputsClient(t mockConstructorTestingTNewInputsClient) *InputsClient {
	mock := &InputsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
